//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppWebb01.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OdontoProEntities : DbContext
    {
        public OdontoProEntities()
            : base("name=OdontoProEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<nota_evolucion> nota_evolucion { get; set; }
        public virtual DbSet<paciente> paciente { get; set; }
        public virtual DbSet<reservacion> reservacion { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tratamiento> tratamiento { get; set; }
    
        public virtual int insertar_nota_evolucion(string nota, Nullable<System.DateTime> fecha_evolucion, Nullable<int> tratamiento_id)
        {
            var notaParameter = nota != null ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(string));
    
            var fecha_evolucionParameter = fecha_evolucion.HasValue ?
                new ObjectParameter("fecha_evolucion", fecha_evolucion) :
                new ObjectParameter("fecha_evolucion", typeof(System.DateTime));
    
            var tratamiento_idParameter = tratamiento_id.HasValue ?
                new ObjectParameter("tratamiento_id", tratamiento_id) :
                new ObjectParameter("tratamiento_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_nota_evolucion", notaParameter, fecha_evolucionParameter, tratamiento_idParameter);
        }
    
        public virtual int insertar_paciente(string nombre, string apellidos, string direccion, string estado, string ciudad, Nullable<System.DateTime> fecha_nac, string telefono, string email, Nullable<int> edad)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("apellidos", apellidos) :
                new ObjectParameter("apellidos", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var fecha_nacParameter = fecha_nac.HasValue ?
                new ObjectParameter("fecha_nac", fecha_nac) :
                new ObjectParameter("fecha_nac", typeof(System.DateTime));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("edad", edad) :
                new ObjectParameter("edad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_paciente", nombreParameter, apellidosParameter, direccionParameter, estadoParameter, ciudadParameter, fecha_nacParameter, telefonoParameter, emailParameter, edadParameter);
        }
    
        public virtual int insertar_reservacion(Nullable<System.DateTime> fecha, Nullable<int> paciente_id)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var paciente_idParameter = paciente_id.HasValue ?
                new ObjectParameter("paciente_id", paciente_id) :
                new ObjectParameter("paciente_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_reservacion", fechaParameter, paciente_idParameter);
        }
    
        public virtual int insertar_tratamiento(string diagnostico, string tratamiento, string observaciones, Nullable<System.DateTime> fecha_inicio, Nullable<int> paciente_id)
        {
            var diagnosticoParameter = diagnostico != null ?
                new ObjectParameter("diagnostico", diagnostico) :
                new ObjectParameter("diagnostico", typeof(string));
    
            var tratamientoParameter = tratamiento != null ?
                new ObjectParameter("tratamiento", tratamiento) :
                new ObjectParameter("tratamiento", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var fecha_inicioParameter = fecha_inicio.HasValue ?
                new ObjectParameter("fecha_inicio", fecha_inicio) :
                new ObjectParameter("fecha_inicio", typeof(System.DateTime));
    
            var paciente_idParameter = paciente_id.HasValue ?
                new ObjectParameter("paciente_id", paciente_id) :
                new ObjectParameter("paciente_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_tratamiento", diagnosticoParameter, tratamientoParameter, observacionesParameter, fecha_inicioParameter, paciente_idParameter);
        }
    
        public virtual ObjectResult<mostrar_notas_evolucion_Result> mostrar_notas_evolucion(Nullable<int> tratamiento_id)
        {
            var tratamiento_idParameter = tratamiento_id.HasValue ?
                new ObjectParameter("tratamiento_id", tratamiento_id) :
                new ObjectParameter("tratamiento_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_notas_evolucion_Result>("mostrar_notas_evolucion", tratamiento_idParameter);
        }
    
        public virtual ObjectResult<mostrar_pacientes_Result> mostrar_pacientes(string textNombre)
        {
            var textNombreParameter = textNombre != null ?
                new ObjectParameter("textNombre", textNombre) :
                new ObjectParameter("textNombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_pacientes_Result>("mostrar_pacientes", textNombreParameter);
        }
    
        public virtual ObjectResult<mostrar_reservacion_Result> mostrar_reservacion(Nullable<int> paciente_id)
        {
            var paciente_idParameter = paciente_id.HasValue ?
                new ObjectParameter("paciente_id", paciente_id) :
                new ObjectParameter("paciente_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_reservacion_Result>("mostrar_reservacion", paciente_idParameter);
        }
    
        public virtual ObjectResult<mostrar_reservaciones_Result> mostrar_reservaciones()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_reservaciones_Result>("mostrar_reservaciones");
        }
    
        public virtual ObjectResult<mostrar_tratamientos_Result> mostrar_tratamientos(Nullable<int> paciente_id)
        {
            var paciente_idParameter = paciente_id.HasValue ?
                new ObjectParameter("paciente_id", paciente_id) :
                new ObjectParameter("paciente_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_tratamientos_Result>("mostrar_tratamientos", paciente_idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
